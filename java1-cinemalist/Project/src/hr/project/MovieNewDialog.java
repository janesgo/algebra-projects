package hr.project;

import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import hr.project.dal.Repository;
import hr.project.dal.RepositoryFactory;
import hr.project.model.Addable;
import hr.project.model.Genre;
import hr.project.model.GenreTransferable;
import hr.project.model.Movie;
import hr.project.model.Person;
import hr.project.parsers.rss.MoviesParser;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.TransferHandler;

/**
 *
 * @author Goran
 */
public class MovieNewDialog extends javax.swing.JDialog {

    private final Addable addable;

    private Movie movie = new Movie();
    private Repository repository;

    private Set<Person> actors = new TreeSet<>();
    private Set<Person> directors = new TreeSet<>();
    private Set<Genre> genres = new TreeSet<>();
    private Set<Genre> allGenres = new TreeSet<>();
    private Set<Person> allPeople = new TreeSet<>();

    private DefaultListModel<Person> actorsModel = new DefaultListModel<>();
    private DefaultListModel<Person> directorsModel = new DefaultListModel<>();
    private DefaultListModel<Genre> genresModel = new DefaultListModel<>();
    private DefaultListModel<Genre> allGenresModel = new DefaultListModel<>();

    private List<JTextField> validationFields;
    private List<JLabel> errorLabels;

    public MovieNewDialog(javax.swing.JFrame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        addable = getAddableComponent(parent);
        init();
        setModels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfTitle = new javax.swing.JTextField();
        lblOriginalTitle = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        lblDuration = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        lblDescription = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        lblDurationMin = new javax.swing.JLabel();
        tfScreeningDate = new javax.swing.JTextField();
        lblPublishedDate = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        lblPoster = new javax.swing.JLabel();
        lblPosterTitle = new javax.swing.JLabel();
        lblAllGenres = new javax.swing.JLabel();
        lblTitleError = new javax.swing.JLabel();
        lblOriginalTitleError = new javax.swing.JLabel();
        lblDescriptionError = new javax.swing.JLabel();
        lblDurationError = new javax.swing.JLabel();
        lblScreeningDateError = new javax.swing.JLabel();
        lblPublishedDateError = new javax.swing.JLabel();
        tfPosterPath = new javax.swing.JTextField();
        btnAddPoster = new javax.swing.JButton();
        lblScreeningDate = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsGenres = new javax.swing.JList<>();
        lblActors = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        lblDirectors = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        btnAddDirector = new javax.swing.JButton();
        btnAddActor = new javax.swing.JButton();
        btnAddGenre = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsAllGenres = new javax.swing.JList<>();
        lblGenres = new javax.swing.JLabel();
        lblLink = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        lblLinkError = new javax.swing.JLabel();
        btnRemoveDirector = new javax.swing.JButton();
        btnRemoveActor = new javax.swing.JButton();
        btnRemoveGenre = new javax.swing.JButton();
        lblPosterError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add movie");

        lblOriginalTitle.setText("Original title:");

        lblDuration.setText("Duration:");

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        lblDescription.setText("Description:");

        lblDurationMin.setText("minutes");

        lblPublishedDate.setText("Published date:");

        lblTitle.setText("Title:");

        lblPoster.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPoster.setIcon(new javax.swing.ImageIcon("C:\\Users\\Goran\\Documents\\NetBeansProjects\\Java1-Project\\Project\\assets\\poster_placeholder.png")); // NOI18N

        lblPosterTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPosterTitle.setText("Poster");

        lblAllGenres.setText("All genres:");

        lblTitleError.setForeground(java.awt.Color.red);
        lblTitleError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblOriginalTitleError.setForeground(java.awt.Color.red);
        lblOriginalTitleError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblDescriptionError.setForeground(java.awt.Color.red);
        lblDescriptionError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblDurationError.setForeground(java.awt.Color.red);
        lblDurationError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblScreeningDateError.setForeground(java.awt.Color.red);
        lblScreeningDateError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblPublishedDateError.setForeground(java.awt.Color.red);
        lblPublishedDateError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        tfPosterPath.setEditable(false);

        btnAddPoster.setText("Add poster");
        btnAddPoster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPosterActionPerformed(evt);
            }
        });

        lblScreeningDate.setText("Screening start date:");

        lsGenres.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lsGenres);

        lblActors.setText("Actors:");

        lsDirectors.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(lsDirectors);

        lblDirectors.setText("Directors:");

        lsActors.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(lsActors);

        btnAddDirector.setText("Add");
        btnAddDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDirectorActionPerformed(evt);
            }
        });

        btnAddActor.setText("Add");
        btnAddActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActorActionPerformed(evt);
            }
        });

        btnAddGenre.setText("Add");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        lsAllGenres.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(lsAllGenres);

        lblGenres.setText("Genres:");

        lblLink.setText("Link:");

        lblLinkError.setForeground(java.awt.Color.red);
        lblLinkError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btnRemoveDirector.setText("Remove");
        btnRemoveDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDirectorActionPerformed(evt);
            }
        });

        btnRemoveActor.setText("Remove");
        btnRemoveActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActorActionPerformed(evt);
            }
        });

        btnRemoveGenre.setText("Remove");
        btnRemoveGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveGenreActionPerformed(evt);
            }
        });

        lblPosterError.setForeground(java.awt.Color.red);
        lblPosterError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1)
                                    .addComponent(lblDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblOriginalTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblDuration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(lblDurationMin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(tfScreeningDate, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblPublishedDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblScreeningDate, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLink, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblScreeningDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(101, 101, 101)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnRemoveGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(60, 60, 60)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(tfPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblPoster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnAddPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPosterError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblAllGenres, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblActors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(lblDirectors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAddDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnRemoveDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAddActor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                        .addComponent(btnRemoveActor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(lblPosterTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(205, 205, 205)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPosterTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(131, 131, 131)
                                .addComponent(lblDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1)
                                .addGap(18, 18, 18)))
                        .addComponent(lblDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDurationMin, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblScreeningDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfScreeningDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblScreeningDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblLink, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(lblDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemoveDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblActors, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddActor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemoveActor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblAllGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPosterError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemoveGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddPosterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPosterActionPerformed
        Optional<File> file = FileUtils.uploadFile("Images", "jpg");
        if (!file.isPresent()) {
            return;
        }
        tfPosterPath.setText(file.get().getAbsolutePath());
        setPoster(file.get().getAbsolutePath());

    }//GEN-LAST:event_btnAddPosterActionPerformed

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed
        Genre genre = (Genre) JOptionPane.showInputDialog(
                this,
                "Select new genre:\n",
                "Add new genre",
                JOptionPane.QUESTION_MESSAGE,
                null,
                allGenres.toArray(), null);
        if (genre != null && genres.add(genre)) {
            setModels();
        }
    }//GEN-LAST:event_btnAddGenreActionPerformed

    private void btnAddDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDirectorActionPerformed
        Person director = (Person) JOptionPane.showInputDialog(
                this,
                "Select new director:\n",
                "Add new director",
                JOptionPane.QUESTION_MESSAGE,
                null,
                allPeople.toArray(), null);
        if (director != null && directors.add(director)) {
            setModels();
        }
    }//GEN-LAST:event_btnAddDirectorActionPerformed

    private void btnAddActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActorActionPerformed
        Person actor = (Person) JOptionPane.showInputDialog(
                this,
                "Select new actor:\n",
                "Add new actor",
                JOptionPane.QUESTION_MESSAGE,
                null,
                allPeople.toArray(), null);
        if (actor != null && actors.add(actor)) {
            setModels();
        }
    }//GEN-LAST:event_btnAddActorActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        if (isFormValid()) {
            try {
                movie.setTitle(tfTitle.getText().trim());
                movie.setOriginalTitle(tfOriginalTitle.getText().trim());
                movie.setDescription(taDescription.getText().trim());
                movie.setDuration(Integer.parseInt(tfDuration.getText()));
                movie.setScreeningStartsDate(LocalDate.parse(tfScreeningDate.getText(), Movie.DATE_FORMATTER));
                movie.setPublishedDate(LocalDateTime.parse(tfPublishedDate.getText(), Movie.DATE_TIME_FORMATTER));
                movie.setLink(tfLink.getText().trim());

                if (!"".equals(tfPosterPath.getText())) {
                    String posterPath = copyPosterToAssets();
                    if (!posterPath.isEmpty()) {
                        movie.setPosterPath(posterPath);
                    }
                }

                movie.setGenres(genres);
                movie.setActors(actors);
                movie.setDirectors(directors);

                if (addable.add(movie)) {
                    dispose();
                } else {
                    MessageUtils.showInformationMessage("Error", "Movie exists");
                }
            } catch (IOException ex) {
                MessageUtils.showErrorMessage("Error", "Error saving poster");
            }
        }
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnRemoveDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDirectorActionPerformed
        Person director = lsDirectors.getSelectedValue();
        if (director != null) {
            directors.remove(director);
            setModels();
        }
    }//GEN-LAST:event_btnRemoveDirectorActionPerformed

    private void btnRemoveActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActorActionPerformed
        Person actor = lsActors.getSelectedValue();
        if (actor != null) {
            actors.remove(actor);
            setModels();
        }
    }//GEN-LAST:event_btnRemoveActorActionPerformed

    private void btnRemoveGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveGenreActionPerformed
        Genre genre = lsGenres.getSelectedValue();
        if (genre != null) {
            genres.remove(genre);
            setModels();
        }
    }//GEN-LAST:event_btnRemoveGenreActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddActor;
    private javax.swing.JButton btnAddDirector;
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnAddPoster;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnRemoveActor;
    private javax.swing.JButton btnRemoveDirector;
    private javax.swing.JButton btnRemoveGenre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblActors;
    private javax.swing.JLabel lblAllGenres;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblDescriptionError;
    private javax.swing.JLabel lblDirectors;
    private javax.swing.JLabel lblDuration;
    private javax.swing.JLabel lblDurationError;
    private javax.swing.JLabel lblDurationMin;
    private javax.swing.JLabel lblGenres;
    private javax.swing.JLabel lblLink;
    private javax.swing.JLabel lblLinkError;
    private javax.swing.JLabel lblOriginalTitle;
    private javax.swing.JLabel lblOriginalTitleError;
    private javax.swing.JLabel lblPoster;
    private javax.swing.JLabel lblPosterError;
    private javax.swing.JLabel lblPosterTitle;
    private javax.swing.JLabel lblPublishedDate;
    private javax.swing.JLabel lblPublishedDateError;
    private javax.swing.JLabel lblScreeningDate;
    private javax.swing.JLabel lblScreeningDateError;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitleError;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<Genre> lsAllGenres;
    private javax.swing.JList<Person> lsDirectors;
    private javax.swing.JList<Genre> lsGenres;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPosterPath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfScreeningDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfOriginalTitle, tfDuration, tfScreeningDate, tfPublishedDate, tfLink, tfPosterPath);
        errorLabels = Arrays.asList(lblTitleError, lblOriginalTitleError, lblDurationError, lblScreeningDateError, lblPublishedDateError, lblLinkError, lblPosterError);
    }

    private boolean isFormValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
        }

        try {
            if (Integer.parseInt(tfDuration.getText().trim()) >= 0) {
                lblDurationError.setText("");
            } else {
                ok = false;
                lblDurationError.setText("X");
            }
        } catch (NumberFormatException e) {
            ok = false;
            lblDurationError.setText("X");
        }

        try {
            LocalDate.parse(tfScreeningDate.getText(), Movie.DATE_FORMATTER);
            lblScreeningDateError.setText("");
        } catch (Exception e) {
            ok = false;
            lblScreeningDateError.setText("X");
        }

        try {
            LocalDate.parse(tfPublishedDate.getText(), Movie.DATE_TIME_FORMATTER);
            lblPublishedDateError.setText("");
        } catch (Exception e) {
            ok = false;
            lblPublishedDateError.setText("X");
        }

        return ok;
    }

    private void init() {
        initValidation();
        initDragNDrop();
        try {
            initRepository();
            initGenresAndPeople();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to load movie");
            dispose();
        }
    }

    private void setPoster(String path) {
        try {
            lblPoster.setIcon(IconUtils.createIcon(path, lblPoster.getWidth(), lblPoster.getHeight()));
        } catch (IOException ex) {
            MessageUtils.showErrorMessage("Error", "Can't load poster");
        }
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void setModels() {
        allGenresModel.clear();
        genresModel.clear();
        actorsModel.clear();
        directorsModel.clear();

        allGenres.forEach(allGenresModel::addElement);
        lsAllGenres.setModel(allGenresModel);

        if (!actors.isEmpty()) {
            actors.forEach(actorsModel::addElement);
            lsActors.setModel(actorsModel);
        }
        if (!directors.isEmpty()) {
            directors.forEach(directorsModel::addElement);
            lsDirectors.setModel(directorsModel);
        }
        if (!genres.isEmpty()) {
            genres.forEach(genresModel::addElement);
            lsGenres.setModel(genresModel);
        }
    }

    private void initGenresAndPeople() throws Exception {
        allGenres.addAll(repository.genresSelectAll());
        allPeople.addAll(repository.peopleSelectAll());
    }

    private String copyPosterToAssets() throws IOException {
        String picturePath = MoviesParser.generateRandomPictureName(tfPosterPath.getText());
        FileUtils.copy(tfPosterPath.getText(), picturePath);
        return picturePath;
    }

    private Addable getAddableComponent(JFrame parent) {
        JSplitPane jsp = (JSplitPane) parent.getContentPane().getComponents()[0];
        JTabbedPane jtp = (JTabbedPane) jsp.getRightComponent();
        return (Addable) jtp.getSelectedComponent();
    }

    private void initDragNDrop() {
        lsAllGenres.setDragEnabled(true);
        lsAllGenres.setTransferHandler(new ExportHandler());

        lsGenres.setDropMode(DropMode.ON);
        lsGenres.setTransferHandler(new ImportHandler());
    }

    private class ExportHandler extends TransferHandler {

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new GenreTransferable(lsAllGenres.getSelectedValue());
        }

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

    }

    private class ImportHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            try {
                Genre genre = (Genre) support.getTransferable().getTransferData(GenreTransferable.GENRE_FLAVOR);
                if (genres.add(genre)) {
                    setModels();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(MovieNewDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

    }
}
