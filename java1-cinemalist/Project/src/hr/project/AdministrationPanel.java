package hr.project;

import hr.algebra.utils.MessageUtils;
import hr.project.dal.Repository;
import hr.project.dal.RepositoryFactory;
import hr.project.model.Genre;
import hr.project.model.Movie;
import hr.project.model.Person;
import hr.project.parsers.rss.MoviesParser;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Goran
 */
public class AdministrationPanel extends javax.swing.JPanel {

    private static final String DIR = "assets";
    private static final String POSTER_PLACEHOLDER = "poster_placeholder.png";

    private Repository repository;

    public AdministrationPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLoad = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1017, 700));

        btnLoad.setText("Load all movies");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete all movies");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(203, 203, 203)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(159, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(295, 295, 295)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(345, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        if (JOptionPane.showConfirmDialog(
                (JFrame) SwingUtilities.windowForComponent(this),
                "Do you really want to load movies?",
                "Load Movies",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                loadMovies();
                MessageUtils.showInformationMessage("Success", "Movies loaded");
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Error loading movies");
            }
        }
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(
                (JFrame) SwingUtilities.windowForComponent(this),
                "Do you really want to delete all movies?",
                "Delete all Movies",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                repository.deleteAll();
                deletePosters();
                MessageUtils.showInformationMessage("Success", "Movies deleted");
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Error deleting movies");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLoad;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            repository = RepositoryFactory.getRepository();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Error loading repository");
            System.exit(-1);
        }
    }

    private void loadMovies() throws Exception {
        Set<Movie> movies = new HashSet<>(MoviesParser.parse());
        Set<Person> people = fillDatabasePeople(movies);
        Set<Genre> genres = fillDatabaseGenres(movies);
        repository.moviesCreateAll(movies);
        repository.moviePersonCreateAll(movies, people);
        repository.movieGenreCreateAll(movies, genres);
    }

    private Set<Person> fillDatabasePeople(Set<Movie> movies) throws Exception {
        Set<Person> people = new HashSet<>();
        for (Movie movie : movies) {
            if (movie.getActors() != null) {
                movie.getActors().forEach(people::add);
            }
            if (movie.getDirectors() != null) {
                movie.getDirectors().forEach(people::add);
            }
        }
        repository.peopleCreateAll(people);
        return people;
    }

    private Set<Genre> fillDatabaseGenres(Set<Movie> movies) throws Exception {
        Set<Genre> genres = new HashSet<>();
        for (Movie movie : movies) {
            if (movie.getGenres() != null) {
                movie.getGenres().forEach(genres::add);
            }
        }
        repository.genresCreateAll(genres);
        return genres;
    }

    private void deletePosters() {
        File[] files;
        files = new File(DIR).listFiles((File dir, String name)
                -> !name.equals(POSTER_PLACEHOLDER));

        for (File file : files) {
            try {
                Files.delete(file.toPath());
            } catch (IOException ex) {
                MessageUtils.showErrorMessage("Error", "File" + file.getName()
                        + "not deleted");
            }
        }
    }
}
