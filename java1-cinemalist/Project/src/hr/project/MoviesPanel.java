package hr.project;

import hr.algebra.utils.MessageUtils;
import hr.project.dal.Repository;
import hr.project.dal.RepositoryFactory;
import hr.project.model.Addable;
import hr.project.model.Movie;
import hr.project.model.MovieTableModel;
import hr.project.model.Position;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 *
 * @author Goran
 */
public class MoviesPanel extends javax.swing.JPanel implements Addable {

    private Repository repository;
    private Set<Movie> movies;
    private MovieTableModel movieTableModel;
    private Movie selectedMovie;

    public Set<Movie> getMovies() throws Exception {
        repository.moviesSelectGenres(movies);
        repository.moviesSelectPeople(movies);
        return movies;
    }

    public MoviesPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spMovies = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnReload = new javax.swing.JButton();
        btnDetails = new javax.swing.JButton();

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        spMovies.setViewportView(tbMovies);

        btnEdit.setText("Edit movie");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnNew.setText("New movie");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete movie");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnReload.setText("Reload movies");
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        btnDetails.setText("Movie details");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 997, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReload, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReload, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(81, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        int selectedRow = tbMovies.getSelectedRow();
        if (selectedRow != -1) {
            int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
            int movieId = (int) tbMovies.getModel().getValueAt(rowIndex, 0);
            selectedMovie = movies.stream()
                    .filter(m -> m.getId() == movieId).findFirst().get();
        }
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedMovie != null) {
            try {
                getGenresAndPeople(selectedMovie);
                repository.movieRemoveAllGenres(selectedMovie.getId(), selectedMovie.getGenres());
                repository.movieRemoveAllPeople(selectedMovie.getId(), selectedMovie.getActors(), Position.from(Position.Actor));
                repository.movieRemoveAllPeople(selectedMovie.getId(), selectedMovie.getDirectors(), Position.from(Position.Director));
                repository.movieDelete(selectedMovie.getId());
                movies.remove(selectedMovie);
                setTableModel();
                
                if (Files.exists(Paths.get(selectedMovie.getPosterPath()))) {
                    Files.delete(Paths.get(selectedMovie.getPosterPath()));
                }
                
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Error deleting movie");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        try {
            loadMovies();
            setTableModel();
            selectedMovie = null;
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to load movies");
            Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnReloadActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        new MovieNewDialog((JFrame) SwingUtilities.windowForComponent(this),
                true).setVisible(true);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (selectedMovie != null) {
            try {
                getGenresAndPeople(selectedMovie);
                new MovieEditDialog((JFrame) SwingUtilities.windowForComponent(this),
                        true, selectedMovie).setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        if (selectedMovie != null) {
            try {
                getGenresAndPeople(selectedMovie);
                new MovieDetailsDialog((JFrame) SwingUtilities.windowForComponent(this),
                        true, selectedMovie).setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDetailsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnReload;
    private javax.swing.JScrollPane spMovies;
    private javax.swing.JTable tbMovies;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepository();
            loadMovies();
            setTableModel();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to load movies");
            Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(-1);
        }
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void loadMovies() throws Exception {
        movies = repository.moviesSelectAll();
    }

    private void setTableModel() throws Exception {
        tbMovies.setAutoCreateRowSorter(true);
        movieTableModel = new MovieTableModel(movies);
        tbMovies.setModel(movieTableModel);
    }

    private void getGenresAndPeople(Movie movie) throws Exception {
        movie.setGenres(repository.movieSelectGenres(movie.getId()));
        movie.setDirectors(repository.movieSelectPeople(movie.getId(), Position.from(Position.Director)));
        movie.setActors(repository.movieSelectPeople(movie.getId(), Position.from(Position.Actor)));
    }

    @Override
    public boolean add(Object o) {
        Movie movie = (Movie) o;

        if (!movies.contains(movie)) {
            try {
                movie.setId(repository.movieCreate(movie));
                repository.movieAddAllGenres(movie.getId(), movie.getGenres());
                repository.movieAddAllPeople(movie.getId(), movie.getActors(), Position.from(Position.Actor));
                repository.movieAddAllPeople(movie.getId(), movie.getDirectors(), Position.from(Position.Director));
                movies.add(movie);
                setTableModel();
                return true;
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Error adding movie");
            }
        }
        return false;
    }
}
